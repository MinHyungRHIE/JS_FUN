/***    let, const    ***/
////////////////////////////////////////////////////////////////////////////////
//var의 문제 : 변수 재선언
var a = 10;
var a = 'hi';
a = 'hello'
console.log('var : ' + a);
////////////////////////////////////////////////////////////////////////////////
//해결 : 변수 재선언 불가능
//let : mutable
//const : immutable
let b = 10;
// let b = 'hi'; //Error
b = 'hello'
console.log('let : ' + b)

const c = 10;
//const c = 'hi'; //Error
// c = 'hello' //Error
console.log('const : ' + c)
////////////////////////////////////////////////////////////////////////////////
//let과 const도 hoist가 발생한다. 하지만...
d = 'tdz'
// let d; //Error
/* 
TDZ(Temporal Dead Zone)
: JS 인터프리터 내부에서 변수는 총 3단계를 걸쳐 생성된다.
    Declaration : 스코프와 변수 객체가 생성되고 스코프가 변수 객체를 참조한다.
    Initialization : 변수 객체가 가질 값을 위해 메모리에 공간을 할당한다. 이때 초기화되는 값은 undefined이다.
    Assignment : 변수 객체에 값을 할당한다.

: Declaration만 일어나면 Initialization이 되지않아 변수에 담길 값을 위한 공간이 메모리에 할당되지 않은 상태
*/
////////////////////////////////////////////////////////////////////////////////
let aaa;
aaa = 'later' //let 은 변수를 먼저 선언하고 나중에 값을 할당하는 것이 가능하지만...

// const bbb //Error
//const는 선언과 동시에 값을 할당해야만 한다.
////////////////////////////////////////////////////////////////////////////////
